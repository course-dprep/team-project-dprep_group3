packages <- c("reshape2", "rmarkdown",
"data.table", "Hmisc", "dplr",
"stargazer", "knitr",
"xtable","tidyverse",
"RSQLite", "dbplyr")
install.packages(packages)
setwd("C:/Users/lenovo/Desktop/Data Prep in Class/project/team-project-dprep_group3/src/data_preparation")
#download data
library(data.table)
library(readr)
library(dplyr)
download_data <- function(url, filename){
download.file(url = url, destfile = paste0(filename, ".csv"))
}
url_crew <- "https://datasets.imdbws.com/title.crew.tsv.gz"
url_ratings <- "https://datasets.imdbws.com/title.ratings.tsv.gz"
url_names <- "https://datasets.imdbws.com/name.basics.tsv.gz"
url_basics <- "https://datasets.imdbws.com/title.basics.tsv.gz"
download_data(url_crew, "crew")
download_data(url_ratings, "ratings")
download_data(url_names, "names")
download_data(url_basics, "basics")
# CLEAN DATA
library(data.table)
library(readr)
library(dplyr)
crew <- read_delim("crew.csv", delim = "\t", col_names = TRUE)
ratings <- read_delim("ratings.csv", delim = "\t", col_names = TRUE)
names <- read_delim("names.csv", delim = "\t", col_names = TRUE)
basics <-read_delim("basics.csv", delim = "\t", col_names = TRUE)
# FILTER
# Filter for Movies
library(dplyr)
movies <- basics %>%
filter(titleType == "movie") %>%
select(tconst) # Keeping only the tconst identifier for merging
# Filter to include only those whose primaryProfession includes 'director' in "name" file
# Load necessary libraries
library(stringr)
directors_dt <- name %>%
filter(str_detect(primaryProfession, "director")) %>%
select(-birthYear, -deathYear, -knownForTitles)
directors_dt <- names %>%
filter(str_detect(primaryProfession, "director")) %>%
select(-birthYear, -deathYear, -knownForTitles)
# for "crew" file writers column removed
crew_filtered <- crew %>%
select(tconst, directors)
# Merge movies with crew to get director information for each movie
movies_directors <- movies %>%
left_join(crew_filtered, by = "tconst")
# Since a movie may have multiple directors, separate them into individual rows
movies_directors <- movies_directors %>%
separate_rows(directors, sep = ",")
# Since a movie may have multiple directors, separate them into individual rows
library(tidyr)
movies_directors <- movies_directors %>%
separate_rows(directors, sep = ",")
View(movies_directors)
View(movies_directors)
# Merge with directors_dt to get director names
movies_directors_names <- movies_directors %>%
left_join(directors_dt, by = c("directors" = "nconst"))
# Merge the above with ratings
movies_directors_ratings <- movies_directors_names %>%
left_join(ratings, by = "tconst")
View(movies_directors_ratings)
# REMOVE MISSING VALUES
movies_directors_ratings_cleaned <- movies_directors_ratings %>%
filter(complete.cases(.))
movies_directors_ratings_cleaned <- movies_directors_ratings_cleaned %>%
filter(across(everything(), ~ !grepl("\\\\N", .x)))
View(movies_directors_ratings_cleaned)
# Step 1: Summarize all ratings per director
directors_summary <- movies_directors_ratings %>%
group_by(primaryName) %>%
summarise(meanRating = mean(averageRating, na.rm = TRUE), .groups = 'drop')
# Step 2: Determine mean of all directors
overall_mean <- mean(directors_summary$meanRating)
# Step 3: Identify and process top 100 most famous directors
# Assuming 'fame' can be proxied by the count of directors in the dataset
top_directors <- directors_dt %>%
filter(primaryName %in% directors_summary$primaryName) %>%
arrange(desc(primaryName)) %>%
head(100)
# Determine mean rating for top 100 directors
top_directors_summary <- directors_summary %>%
filter(primaryName %in% top_directors$primaryName)
mean_top_directors <- mean(top_directors_summary$meanRating)
# Step 4: Compare means
comparison <- data.frame(OverallMean = overall_mean, Top100Mean = mean_top_directors)
View(comparison)
View(top_directors)
View(top_directors_summary)
